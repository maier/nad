#!/usr/bin/env node
// -*-Javascript-*-

/* eslint-disable no-process-exit */
/* eslint-disable no-sync */
/* eslint-disable no-bitwise */
/* eslint-disable no-mixed-operators */
/* eslint-disable global-require */
/* eslint-disable no-plusplus */
/* eslint-disable no-param-reassign */
/* eslint-disable guard-for-in */
/* eslit-disable no-nested-ternary */
/* eslint-disable max-params */

'use strict';

/*

Plugins

Executable plugins:
    Place excutable file in plugin_dir (default: /opt/circonus/etc/node-agent.d)

    Plugin should emit lines in one of the following two formats:
        <metric_name><whitespace><metric_type>
    or:
        <metric_name><whitespace><metric_type><whitespace><value>

    The first indicates the metric_name is present with a null value.
    The second indicates the metric_name is present with a specific value.

Native plugins:
    Place file (ending in '.js') into plugin_dir. See example at:
    https://github.com/circonus-labs/nad/blob/master/plugins/example/native.js

Push receiver
    Metrics can be 'pushed' to NAD via HTTP PUT|POST 127.0.0.1:2609/write with body as JSON

*/

const http = require('http');
const https = require('https');
const url = require('url');

const settings = require('settings');
const Plugins = require('plugins');
let plugins = null;
let push_receiver = null; // listener, metrics can be 'pushed' to nad
const log = settings.logger;
let circwmi = null; // only load if it's going to be used. (iow, if this is windows)

log.info('initializing');

if (settings.is_windows) {
    try {
        log.info('loading WMI module for Windows platform');
        circwmi = require('circwmi');
    } catch (err) {
        const msg = 'unable to load circwmi module';

        console.error(settings.pfx_error, msg, err);
        log.fatal({ err }, msg);
        process.exit(1);
    }
}

// handler processes web requests
function handler(req, res) {
    const bodyChunks = [];

    req.addListener('data', (chunk) => {
        bodyChunks.push(chunk);
    });

    req.addListener('end', () => {
        let matches = null;
        const urlPath = url.parse(req.url).pathname;
        const body = Buffer.concat(bodyChunks).toString();

        log.debug({ method: req.method, path: urlPath, base: req.url }, 'request');
        if (req.method === 'GET') {
            // request for meta-info about the loaded plugins
            if (/^\/inventory$/.test(urlPath)) {
                log.debug('inventory request');
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.write(plugins.inventory());
                res.end();
                return;
            }

            // request to run all plugins and return results
            if (/^\/(?:run)?$/.test(urlPath)) {
                log.debug('running all scripts');
                plugins.run(req, res, null);
                return;
            }

            // request to run just one plugin and return results
            matches = (/^\/run\/(.+)$/).exec(urlPath);
            if (matches) {
                log.debug({ script: matches[1] }, 'running plugin');
                plugins.run(req, res, matches[1]);
                return;
            }

            // wmi-specific
            if (settings.is_windows) {
                if ((/^\/wmi\/get-categories$/).test(urlPath)) {
                    log.debug('wmi categories request');
                    circwmi.get_categories(res);
                    return;
                }
                matches = (/^\/wmi\/(.+)$/).exec(urlPath);
                if (matches) {
                    log.debug({ category: matches[1] }, 'wmi counters request');
                    circwmi.get_counters_for_category(res, matches[1], settings.debug_dir, settings.wipe_debug_dir);
                    return;
                }
            }
        }

        // push plugin
        if (push_receiver !== null) {
            matches = (/^\/write\/(.+)$/).exec(urlPath);
            if (matches) {
                if (req.method !== 'PUT' && req.method !== 'POST') {
                    res.writeHead(405, 'Method Not Allowed', { Allow : 'PUT, POST' });
                    res.end();
                    return;
                }
                log.debug({ name: matches[1] }, 'write request');
                log.trace({ name: matches[1], data: body }, 'write metrics');
                push_receiver.obj.some_data(matches[1], body);
                res.writeHead(200, 'OK', { 'Content-Type': 'text/plan' });
                res.end();
                return;
            }
        }

        // otherwise... consider it an invalid request

        log.debug({ method: req.method, path: urlPath }, 'invalid request');
        res.writeHead(404, 'invalid request');
        res.end();
    });

    // if we don't have a data listener the stream starts paused in node 10+
    req.addListener('data', () => {});
}

// finish_bootstrap completes the loading process after plugins have been scanned
function finish_bootstrap() {
    settings.is_booted = true;

    // //////////////////////////////////////////////////////////////////////
    // start webservers
    // //////////////////////////////////////////////////////////////////////

    for (const server of settings.listen) {
        log.debug({ server }, 'starting server');

        try {
            http.createServer(handler).listen(server.port, server.address);
            log.info({ server }, 'started');
        } catch (err) {
            const msg = 'failed to start server';

            console.error(settings.pfx_error, msg, server, err);
            log.fatal({ server, err }, msg);
            process.exit(-1);
        }
    }

    for (const server of settings.ssl.listen) {
        log.debug({ server }, 'starting SSL server');

        try {
            https.createServer(settings.ssl.creds, handler).listen(server.port, server.address);
            log.info({ server }, 'started (SSL)');
        } catch (err) {
            const msg = 'failed to start SSL server';

            console.error(settings.pfx_error, msg, server, err);
            log.fatal({ server, err }, msg);
            process.exit(-1);
        }
    }

    log.debug('installing SIGHUP handler to trigger plugin rescan');
    process.on('SIGHUP', () => {
        log.info('SIGHUP received, re-scanning plugins');
        plugins.scan();
    });

    if (settings.drop_uid > 0 && process.setuid) {
        log.info({ uid: settings.drop_uid }, 'dropping privileges');
        process.setuid(settings.drop_uid);
    }

    if (settings.reverse.enabled) {
        log.info('setting up reverse connection');
        let reverse = null;

        try {
            reverse = require('reverse');
        } catch (err) {
            console.error(err);
            log.fatal({ err }, 'unable to set up reverse connection');
            process.exit(1);
        }

        let api_options = url.parse(settings.api.url);

        if (!settings.api.use_apiurl) {
            api_options = settings.api.old_options;
        }

        const options = {
            cafile: settings.reverse.broker_ca,
            hostname: settings.hostname,
            apiKey: settings.api.key,
            apiApp: settings.api.app,
            api_options,
            check_bundle_id: settings.reverse.check_bundle_id,
            server_port: settings.listen[0].port
        };

        reverse(options, log);
    }

    if (global.gc) {
        setInterval(() => {
            log.info('running gc');
            global.gc();
        }, 300 * 1000);
    }

    log.debug('bootstrap complete');
}

try {
    log.debug('loading push receiver handler');

    let PushReceiver = null;

    try {
        PushReceiver = require('push_receiver');
    } catch (err) {
        const msg = 'failed to load push_recever module';

        console.error(settings.pfx_error, msg, err);
        log.fatal({ err }, msg);
        process.exit(1);
    }

    // NOTE: this *simulates* a regular plugin
    push_receiver = {
        name: 'push_receiver',
        generation: -1,
        command: null,
        is_native: true,
        native_obj: new PushReceiver(),
        running: false,
        last_start: null,
        sb: null,
        config: null,
        config_file: null,
        last_result: {}
    };

    log.info('push receiver handler loaded');

} catch (err) {
    const msg = 'unable to initialize push receiver';

    console.log(settings.pfx_error, msg, err);
    log.fatal({ err }, msg);
    process.exit(1);
}

// initialize plugins

plugins = new Plugins({
    plugin_dir: settings.plugin_dir,
    is_windows: settings.is_windows,
    pfx_error: settings.pfx_error,
    send_nad_stats: settings.send_nad_stats,
    debug_dir: settings.debug_dir,
    wipe_debug_dir: settings.wipe_debug_dir,
    file_watch: settings.file_watch,
    log,
    push_receiver
});

// initial scan for plugins and then finish bootstrapping nad
plugins.scan(finish_bootstrap);

// END
